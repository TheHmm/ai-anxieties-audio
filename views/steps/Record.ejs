<section>
  <p>Welcome to the IDFA x The Hmm Hotline! Please record your question about artificial intelligence below and tune in for <a href="http://thehmm.nl/event/ask-us-anything-hotline-on-ai-advice">Ask Us Anything: Hotline on AI Advice</a> to hear a panel of experts give their answers December 6.</p>
  <p>Don't know where to start?</p>
  <p class="eg">☏: "Dear Hotline, I'm an anonymous graphic designer from Utrecht, and I'm wondering..."</p>
  <p class="eg">☏: "Hi IDFA x The Hmm Hotline, I'm Alex from Rotterdam, and the other day I read something disturbing. Is it true that..."</p>
</section>

<section>
  <div id="controls">
    <button id="recordButton">Record</button>
    <button id="stopButton" disabled>Stop</button>
    <button id="discardButton" disabled>Discard</button>
    <button id="uploadButton" disabled>Upload</button>
  </div>
  <div id="output"></div>
  <div id="timer" style="display: none;">
    <span id="minutes">00</span>:<span id="seconds">00</span>
  </div>
</section>


<script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
<script>
    let rec = null;
    let audioStream = null;

    //TIMER OBJECT
    const timer = {
      element: document.getElementById("timer"),
      totalSeconds: null,
      interval: null,
      start () {
        if (this.interval) {
          return;
        }
        this.interval = setInterval( () => {
          this.totalSeconds += 1;
          if (this.totalSeconds === 60) {
            stopRecording();
          }
          document.getElementById("minutes").innerText = `${Math.floor(this.totalSeconds / 60 )}`.padStart(2, "0");
          document.getElementById("seconds").innerText = `${this.totalSeconds % 60}`.padStart(2, "0");
        }, 1000);
        this.element.style.display = "block";
      },
      reset () {
        if (!this.interval) {
          return;
        }
        timer.totalSeconds = null;
        clearInterval(this.interval);
        this.interval = null;
        document.getElementById("minutes").innerText = "00";
        document.getElementById("seconds").innerText = "00";
        this.element.style.display = "none";
      },
    };

    let audioData = null;
    let audioElement = null;
    const recordButton = document.getElementById("recordButton");
    const stopButton = document.getElementById("stopButton");
    const discardButton = document.getElementById("discardButton");
    const uploadButton = document.getElementById("uploadButton");
    const outputElement = document.getElementById("output");

    recordButton.addEventListener("click", startRecording);
    stopButton.addEventListener("click", stopRecording);
    discardButton.addEventListener("click", discardRecording);
    uploadButton.addEventListener("click", uploadRecording);

    function startRecording() {
        let constraints = { audio: true, video:false }
        recordButton.disabled = true;
        stopButton.disabled = false;

        navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
            const audioContext = new window.AudioContext();
            audioStream = stream;
            const input = audioContext.createMediaStreamSource(stream);
            rec = new Recorder(input, { numChannels: 1 })
            rec.record()
            outputElement.innerHTML = "The recording has started..."
        }).catch(function(err) {
            recordButton.disabled = false;
            stopButton.disabled = true;
        });
        timer.start();
    }

    function stopRecording() {
        timer.reset();
        outputElement.innerHTML = "The recording has stopped."
        stopButton.disabled = true;
        discardButton.disabled = false;
        uploadButton.disabled = false;
        rec.stop();
        audioStream.getAudioTracks()[0].stop();
        rec.exportWAV((blob) => {
          audioData = blob;
          audioElement = document.createElement("audio")
          audioElement.setAttribute("src", URL.createObjectURL(blob))
          audioElement.toggleAttribute("controls")
          outputElement.innerHTML = ""
          outputElement.appendChild(audioElement)
        });
    }

    function discardRecording() {
      outputElement.innerHTML = "The recording has been discarded."
      recordButton.disabled = false;
      discardButton.disabled = true;
      uploadButton.disabled = true;
      audioElement.remove();
    }

    function uploadRecording() {
        recordButton.disabled = false;
        discardButton.disabled = true;
        uploadButton.disabled = true;
        audioElement.remove();
        const filename = "recording-" + new Date().toISOString() + ".wav";
        const formData = new FormData();
        formData.append( "file", audioData, filename);

        fetch('/Upload', {
            method: 'POST',
            body: formData
        }).then(async result => {
            outputElement.innerHTML = `<p>The recording has been uploaded. <br />Don't forget to join us at <a href="http://thehmm.nl/event/ask-us-anything-hotline-on-ai-advice">Ask Us Anything: Hotline on AI Advice</a> to hear your question answered!</p>`;
        }).catch(error => {
            outputElement.innerHTML = "An error occurred: " + error;
        })
    }
</script>
